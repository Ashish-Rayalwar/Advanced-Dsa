function nQueens(n){
    const result = [];
    const board = Array.from(Array(n), ()=>Array(n).fill('.'));

    function isSafe(row, col){
        //Checking if there is a queen in the same col
        for(let i=0; i<row; i++){
            if(board[i][col] === 'Q'){
                return false
            }
        }
        //Checking if there is a queen in the upper left diagonal
        for(let i=row-1, j = col-1; i>=0 && j>=0; i--, j--){
            if(board[i][j] === 'Q'){
                return false;
            }
        }
        //Checking if there is a queen in the upper right diagonal
        for(let i=row-1, j = col+1; i>=0 && j < n; i--, j++){
            if(board[i][j] === 'Q'){
                return false;
            }
        }
        return true;
    }

    function backtrack(row){
        if(row === n){
            result.push(board.map(row => row.join(''))) // solution found, adding to the result
            return;
        }
        for(let col=0; col<n; col++){
            if(isSafe(row,col)){
                board[row][col] = 'Q'
                backtrack(row + 1);
                board[row][col] = '.'
            }
        }
    }
    backtrack(0);
    return result
}
